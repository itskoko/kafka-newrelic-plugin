#! /usr/bin/env ruby

require "rubygems"
require "bundler/setup"

Bundler.require

module KafkaConsumerLagAgent

  class Agent < NewRelic::Plugin::Agent::Base

    agent_guid "com.kareemk.kafka.consumer-lag"
    agent_version "0.0.1"
    agent_config_options :host, :port
    agent_human_labels("Kafka Consumer") { host }

    def poll_cycle
      zookeeper = Zookeeper.new("#{host}:#{port}")

      consumers_offsets = {}

      zookeeper.get_children(path: '/consumers')[:children].each do |consumer|
        zookeeper.get_children(path: "/consumers/#{consumer}/offsets")[:children].each do |topic|
          offsets = {}
          zookeeper.get_children(path: "/consumers/#{consumer}/offsets/#{topic}")[:children].each do |partition|
            offsets[partition.to_i] = zookeeper.get(path: "/consumers/#{consumer}/offsets/#{topic}/#{partition}")[:data].to_i
          end

          consumers_offsets[topic] ||= {}
          consumers_offsets[topic][consumer] = offsets
        end
      end

      topics_offsets = {}

      zookeeper.get_children(path: '/brokers/topics')[:children].each do |topic|
        partitions = zookeeper.get_children(path: "/brokers/topics/#{topic}/partitions")[:children]
        broker = JSON.load(zookeeper.get(path: '/brokers/ids/0')[:data])
        kafka  = Poseidon::Connection.new(broker["host"], broker["port"], "newrelic-conumser-lag", 1000)

        partition_requests = partitions.map { |partition| Poseidon::Protocol::PartitionOffsetRequest.new(partition.to_i, -1, 1) }
        offset_res = kafka.offset([Poseidon::Protocol::TopicOffsetRequest.new(topic, partition_requests)])

        offset_res[0].partition_offsets.each do |offset|
          topics_offsets[topic] ||= {}
          topics_offsets[topic][offset.partition] = offset.offsets.first.offset
        end
      end

      topics_offsets.each do |topic, offsets|
        consumers_offsets[topic].each do |consumer, consumer_offsets|
          lags = offsets.map { |partition, offset| offset - consumer_offsets[partition] }
          report_metric "/#{topic}/#{consumer}", "Lag", lags.inject(:+)
        end
      end
    end
  end

  NewRelic::Plugin::Setup.install_agent :kafka_consumer_lag, KafkaConsumerLagAgent

  NewRelic::Plugin::Run.setup_and_run
end
